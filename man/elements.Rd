% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/elements.R
\name{elements}
\alias{elements}
\alias{keep_it}
\alias{discard_it}
\alias{compact_it}
\title{Easily Subset Elements of Objects}
\usage{
keep_it(x, lgl, ...)

discard_it(x, lgl, ...)

compact_it(x)
}
\arguments{
\item{x}{A list, data frame, or vector.}

\item{lgl}{A logical vector or a function that returns a logical
vector when applied to the elements of \code{x}.}

\item{...}{Named arguments passed to \code{lgl} if \code{lgl} is a function.}
}
\description{
Local alternatives to \code{\link[purrr:keep]{purrr::keep()}}, \code{\link[purrr:keep]{purrr::discard()}},
and \code{\link[purrr:keep]{purrr::compact()}}, but without having to import the \pkg{purrr}
package. The syntax and behavior is generally the same, with some
exceptions (see Details). For example, \code{\link[=compact_it]{compact_it()}} is similar
to \code{\link[purrr:keep]{purrr::compact()}}, however only supports
the default behavior where non-empty elements are retained.
}
\details{
These functions are not a simple drop-in replacement,
as they do not support quasi-quotation or formula syntax, but
should be a sufficient replacement in most cases.
}
\section{Functions}{
\itemize{
\item \code{keep_it()}: keeps elements corresponding to \code{lgl}.

\item \code{discard_it()}: the inverse of \code{\link[=keep_it]{keep_it()}}.

\item \code{compact_it()}: subsets elements that have non-zero length.

}}
\examples{
# pass a logical vector
lst <- list(A = 1, B = 2, C = 3)
keep_it(lst, c(TRUE, FALSE, TRUE))
# logical vector on-the-fly
vec <- unlist(lst)
keep_it(vec, vec != 2)

# subset itself
keep_it(c(a = TRUE, b = FALSE, c = TRUE), identity)

# pass a simple function
lst <- replicate(10, sample(10, 5), simplify = FALSE)
keep_it(lst, function(x) mean(x) > 6)

# will work on data frames
df <- data.frame(a = 5, b = 2, c = 10)
keep_it(df, function(x) x >= 5)

df <- data.frame(a = "A", b = "B", c = 10, d = 20)
keep_it(df, is.numeric)

# compact_it() selects elements with non-zero length
lst <- list(A = 5, B = character(0), C = 6, D = NULL, E = NA, F = list())
compact_it(lst)
# discard_it() works nicely with `be_safe()`
.f <- be_safe(log10)
res <- .f("5")
discard_it(res, is.null)
}
