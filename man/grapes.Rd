% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grapes.R
\name{grapes}
\alias{grapes}
\alias{\%||-\%}
\alias{\%@@\%}
\alias{\%@@\%<-}
\alias{\%==\%}
\alias{\%!=\%}
\alias{\%===\%}
\alias{\%set\%}
\alias{\%!set\%}
\alias{\%[[\%}
\title{Special Infix Operators}
\usage{
x \%||-\% y

x \%@@\% y

x \%@@\% y <- value

x \%==\% y

x \%!=\% y

x \%===\% y

x \%set\% y

x \%!set\% y

x \%[[\% y
}
\arguments{
\item{x}{The left hand side of the infix operator.}

\item{y}{The right hand side of the infix operator.}

\item{value}{New value for attribute \code{y}.}
}
\description{
A series of useful infix operators, aka "grapes", that
can be used to facilitate core functionality, test equality,
perform set operations, etc.
}
\section{Functions}{
\itemize{
\item \code{x \%||-\% y}: A variant of base R \verb{\%||\%} which returns the lhs also
if the \emph{length} of the rhs is zero, as well as if \code{NULL}.

\item \code{x \%@@\% y}: A friendly version of \code{attr(x, y)} to extract \code{"@ribute"} elements.
\code{y} can be unquoted.

\item \code{`\%@@\%`(x, y) <- value}: Assign \code{"@ributes"} via infix operator.
A friendly version of \code{attr(x, y) <- value}. \code{y} can be unquoted.

\item \code{x \%==\% y}: A gentler logical test for equality of two objects.
Attributes are \emph{not} checked.
Use \verb{\%===\%} to check attributes.

\item \code{x \%!=\% y}: A logical test that two objects are \emph{not} equal.

\item \code{x \%===\% y}: Also tests attributes of \code{x} and \code{y}.

\item \code{x \%set\% y}: Subset values in \code{x} by \code{y}.
Alias for \code{x[x \%in\% y]}.
Similar to \code{intersect(x, y)} except names
and class of \code{x} are maintained.

\item \code{x \%!set\% y}: Subset values in \code{x} \emph{not} in \code{y}.
Alias for \code{x[!x \%in\% y]}.
Similar to \code{setdiff(x, y)} except names
and class of \code{x} are maintained.

\item \code{x \%[[\% y}: Extracts the \code{i^th} element for each
of \code{n} elements of a list or data frame,
returning either a vector of length \code{n}
or a single row data frame with \code{n} columns.
More efficient alias for \verb{purrr::map_*(x, y)}.

}}
\examples{
factor(1:3) \%@@\% levels
factor(1:3, levels = LETTERS[1:3L]) \%@@\% levels

mtcars \%==\% mtcars       # equal
cars2 <- mtcars
cars2 \%@@\% a <- "foo"  # attr assignment; with unquoted 'a'
mtcars \%==\% cars2        # attr not checked; TRUE
mtcars \%===\% cars2       # attr checked; FALSE

x <- list(a = "b", c = "d", e = "f")
x \%set\% c("a", "c", "d")   # 'c' match
x \%!set\% c("a", "c", "d")  # 'b' match
unlist(x) \%!set\% c("a", "c", "d")   # 'c' match; vector-vector

# extract elements of a list
x <- list(a = 1:3, b = 4:6, c = 7:9)
x \%[[\% 2L

data.frame(x) \%[[\% 2L     # data frame -> same as x[2L, ]
}
\seealso{
\code{\link[=intersect]{intersect()}}, \code{\link[=setdiff]{setdiff()}}, \code{\link[=all.equal]{all.equal()}}, \code{\link[=isTRUE]{isTRUE()}}
}
