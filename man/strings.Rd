% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strings.R
\name{strings}
\alias{strings}
\alias{pad}
\alias{squish}
\alias{trim}
\alias{capture}
\title{Working with Strings}
\usage{
pad(x, width, side = c("right", "left", "both"))

squish(x)

trim(x, side = c("both", "left", "right"), whitespace = "[ \\t\\r\\n]")

capture(text, pattern)
}
\arguments{
\item{x}{A character vector.}

\item{width}{\code{integer(1)}. The minimum width of padding for each element.}

\item{side}{\code{character(1)}. Pad to the left or right.}

\item{whitespace}{A string specifying a regular expression to
match (one character of) "white space".}

\item{text}{A character vector where matches are sought.}

\item{pattern}{\code{character(1)}. A string \emph{containing a group capture} regex.}
}
\description{
Tools for working with character/text strings without
importing the \pkg{stringr} package.
}
\details{
Below is a convenient table of the \pkg{stringr} to base \pkg{R} equivalents:
\tabular{ll}{
\pkg{stringr}                \tab base \pkg{R} \cr
\code{\link[stringr:str_c]{stringr::str_c()}}           \tab \code{\link[=paste]{paste()}} \cr
\code{\link[stringr:str_count]{stringr::str_count()}}       \tab \code{\link[=gregexpr]{gregexpr()}} + \code{attr(x, "match.length")}] \cr
\code{\link[stringr:str_dup]{stringr::str_dup()}}         \tab \code{\link[=strrep]{strrep()}} \cr
\code{\link[stringr:str_detect]{stringr::str_detect()}}      \tab \code{\link[=grepl]{grepl()}} \cr
\code{\link[stringr:str_flatten]{stringr::str_flatten()}}     \tab \code{paste(..., collapse = "")} \cr
\code{\link[stringr:str_glue]{stringr::str_glue()}}        \tab \code{\link[=sprintf]{sprintf()}} \cr
\code{\link[stringr:str_length]{stringr::str_length()}}      \tab \code{\link[=nchar]{nchar()}} \cr
\code{\link[stringr:str_locate]{stringr::str_locate_all()}}  \tab \code{\link[=regexpr]{regexpr()}} \cr
\code{\link[stringr:str_match]{stringr::str_match()}}       \tab \code{\link[=match]{match()}} \cr
\code{\link[stringr:str_order]{stringr::str_order()}}       \tab \code{\link[=order]{order()}} \cr
\code{\link[stringr:str_remove]{stringr::str_remove()}}      \tab \code{sub(..., replacement = "")} \cr
\code{\link[stringr:str_remove]{stringr::str_remove_all()}}  \tab \code{gsub(..., replacement = "")} \cr
\code{\link[stringr:str_replace]{stringr::str_replace()}}     \tab \code{\link[=sub]{sub()}} \cr
\code{\link[stringr:str_replace]{stringr::str_replace_all()}} \tab \code{\link[=gsub]{gsub()}} \cr
\code{\link[stringr:str_order]{stringr::str_sort()}}        \tab \code{\link[=sort]{sort()}} \cr
\code{\link[stringr:str_split]{stringr::str_split()}}       \tab \code{\link[=strsplit]{strsplit()}} \cr
\code{\link[stringr:str_sub]{stringr::str_sub()}}         \tab \code{\link[=substr]{substr()}}, \code{\link[=substring]{substring()}}, \code{\link[=strtrim]{strtrim()}} \cr
\code{\link[stringr:str_subset]{stringr::str_subset()}}      \tab \code{grep(..., value = TRUE)} \cr
\code{\link[stringr:case]{stringr::str_to_lower()}}    \tab \code{\link[=tolower]{tolower()}} \cr
\code{\link[stringr:case]{stringr::str_to_upper()}}    \tab \code{\link[=toupper]{toupper()}} \cr
\code{\link[stringr:str_trim]{stringr::str_trim()}}        \tab \code{\link[=trimws]{trimws()}} \cr
\code{\link[stringr:str_which]{stringr::str_which()}}       \tab \code{\link[=grep]{grep()}} \cr
\code{\link[stringr:str_wrap]{stringr::str_wrap()}}        \tab \code{\link[=strwrap]{strwrap()}}
}
And those found only in \pkg{helpr}:
\tabular{ll}{
\pkg{stringr}            \tab \pkg{helpr} \cr
\code{\link[stringr:str_extract]{stringr::str_extract()}} \tab \code{\link[=capture]{capture()}}, \code{gsub(..., replacement = "\\\\1")} \cr
\code{\link[stringr:str_trim]{stringr::str_squish()}}  \tab \code{\link[=squish]{squish()}} \cr
\code{\link[stringr:str_pad]{stringr::str_pad()}}     \tab \code{\link[=pad]{pad()}} or \code{\link[=sprintf]{sprintf()}} \cr
\code{\link[stringr:str_trim]{stringr::str_trim()}}    \tab \code{\link[=trim]{trim()}}
}
}
\section{Functions}{
\itemize{
\item \code{pad()}: Similar to \code{stringr::str_pad()} but does
uses \emph{only} a blank space as the padding character.

\item \code{squish()}: The inverse of \code{\link[=pad]{pad()}}, removes whitespace on both
sides \emph{and} replicated internal whitespace.
Similar to \code{stringr::str_squish()}.

\item \code{trim()}: A wrapper around \code{\link[=trimws]{trimws()}} but with unified
argument names.

\item \code{capture()}: Uses "group capture" regular expression from the \code{pattern} argument to
extract matches from character string(s).
Analogous to \code{\link[stringr:str_extract]{stringr::str_extract()}}.

}}
\examples{
pad("tidyverse", 20)
pad("tidyverse", 20, "left")
pad("tidyverse", 20, "both")

squish("  abcd   efgh   ")
squish("  abcd   efgh   .")

trim("  abcd   efgh   ")
trim("  abcd   efgh   .")

# extract the group 'oo'
capture(c("foo", "bar", "boo", "oops"), "(oo)")

# capture multiple groups
capture(c("foo", "bar", "boo", "oops-e-doo"), "(.*)(oo)")
}
\seealso{
\code{\link[=encodeString]{encodeString()}}, \code{\link[=trimws]{trimws()}}, \code{\link[=regexpr]{regexpr()}}, \code{\link[=substring]{substring()}}
}
